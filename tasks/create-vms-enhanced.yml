---
- name: Create Kubernetes VMs on laptop
  hosts: laptop
  become: yes
  vars_files:
    - ../group_vars/laptop.yml

  tasks:
    - name: Clean up any existing VMs
      shell: |
        for vm in k8s-control k8s-worker1 k8s-worker2; do
          virsh destroy $vm 2>/dev/null || true
          virsh undefine $vm --remove-all-storage 2>/dev/null || true
        done
      ignore_errors: yes

    - name: Ensure Ubuntu 24.04 cloud image exists
      get_url:
        url: https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img
        dest: "{{ base_image }}"
        mode: '0644'

    - name: Create cloud-init configurations with Pi SSH key
      copy:
        dest: "/tmp/cloud-init-{{ item.key }}.yml"
        content: |
          #cloud-config
          hostname: {{ item.key }}
          manage_etc_hosts: true
          users:
            - name: {{ ssh_user }}
              groups: [wheel, sudo]
              sudo: ['ALL=(ALL) NOPASSWD:ALL']
              shell: /bin/bash
              lock_passwd: true
              ssh_authorized_keys:
                - {{ raspberry_pi_ssh_key }}
            - name: ubuntu
              groups: [wheel, sudo]
              sudo: ['ALL=(ALL) NOPASSWD:ALL']
              shell: /bin/bash
              lock_passwd: true
              ssh_authorized_keys:
                - {{ raspberry_pi_ssh_key }}
          ssh_pwauth: false
          disable_root: false
          package_update: true
          package_upgrade: true
          packages:
            - qemu-guest-agent
            - python3
            - python3-pip
            - openssh-server
            - curl
            - vim
            - htop
          runcmd:
            - systemctl enable ssh
            - systemctl start ssh
            - systemctl enable qemu-guest-agent
            - systemctl start qemu-guest-agent
            - touch /var/lib/cloud/instance/boot-finished
            - echo "Cloud-init completed - ready for Pi access" >> /var/log/cloud-init-done.log
          growpart:
            mode: auto
            devices: ['/']
          final_message: "VM ready for Raspberry Pi SSH access"
      loop: "{{ vm_specs | dict2items }}"

    - name: Create cloud-init ISOs
      shell: cloud-localds /tmp/cloud-init-{{ item.key }}.iso /tmp/cloud-init-{{ item.key }}.yml
      loop: "{{ vm_specs | dict2items }}"

    - name: Create VM disks
      shell: |
        qemu-img create -f qcow2 -b {{ base_image }} -F qcow2 \
          /var/lib/libvirt/images/{{ item.key }}.qcow2 {{ item.value.disk }}G
      loop: "{{ vm_specs | dict2items }}"

    - name: Create VMs
      shell: |
        virt-install \
          --name {{ item.key }} \
          --memory {{ item.value.memory }} \
          --vcpus {{ item.value.vcpus }} \
          --disk /var/lib/libvirt/images/{{ item.key }}.qcow2,device=disk,bus=virtio \
          --disk /tmp/cloud-init-{{ item.key }}.iso,device=cdrom \
          --os-variant ubuntu24.04 \
          --network network={{ network_name }} \
          --graphics none \
          --console pty,target_type=serial \
          --noautoconsole \
          --boot hd \
          --import \
          --autostart
      loop: "{{ vm_specs | dict2items }}"


    - name: Wait for VMs to start
      shell: virsh domstate {{ item.key }}
      register: vm_state
      until: vm_state.stdout == "running"
      retries: 10
      delay: 5
      loop: "{{ vm_specs | dict2items }}"

    - name: Wait for DHCP leases
      shell: |
        for i in {1..60}; do
          count=$(virsh net-dhcp-leases default | grep -c k8s || true)
          [ "$count" -eq "3" ] && break
          sleep 5
        done

    - name: Get VM IPs
      shell: |
        for vm in k8s-control k8s-worker1 k8s-worker2; do
          mac=$(virsh domiflist $vm | grep -oE '([0-9a-f]{2}:){5}[0-9a-f]{2}' | head -1)
          ip=$(virsh net-dhcp-leases default | grep -i $mac | awk '{print $5}' | cut -d'/' -f1)
          echo "$vm: $ip"
        done
      register: vm_ips

    - name: Wait for SSH to be ready on VMs
      wait_for:
        host: "{{ item.split(':')[1] | trim }}"
        port: 22
        delay: 10
        timeout: 300
      loop: "{{ vm_ips.stdout_lines }}"
      when: item | length > 0

    - name: Save VM info to file on laptop
      copy:
        dest: ~/k8s-vm-info.txt
        content: |
          Kubernetes VMs - Access from Raspberry Pi
          ==========================================
          Created: {{ ansible_date_time.iso8601 }}

          {{ vm_ips.stdout }}

          All VMs have your Raspberry Pi SSH key installed.
          From your Pi, SSH directly to any VM:
            ssh ansible@<ip-address>

          To destroy these VMs from your Pi:
            ansible-playbook -i inventory.ini destroy-k8s-cluster.yml
