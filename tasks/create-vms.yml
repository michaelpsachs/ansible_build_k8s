---
- name: "Clean up any existing VMs"
  shell: |
    ssh {{ kvm_user }}@{{ kvm_host }} '
    for vm in k8s-control k8s-worker1 k8s-worker2; do
      sudo virsh destroy $vm 2>/dev/null || true
      sudo virsh undefine $vm --remove-all-storage 2>/dev/null || true
    done
    sudo rm -f /var/lib/libvirt/images/k8s-*
    echo "Cleanup complete"'

- name: "Ensure Ubuntu cloud image exists"
  shell: |
    ssh {{ kvm_user }}@{{ kvm_host }} '
    if [ ! -f /var/lib/libvirt/images/ubuntu-base.img ]; then
      wget -O ~/ubuntu-base.img \
      http://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
      sudo mv ~/ubuntu-base.img /var/lib/libvirt/images/ubuntu-base.img
      sudo chown libvirt-qemu:libvirt-qemu /var/lib/libvirt/images/ubuntu-base.img
    fi'

- name: "Create dual-key cloud-init files"
  copy:
    content: |
      #cloud-config
      users:
        - name: ubuntu
          plain_text_passwd: ubuntu
          lock_passwd: false
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          shell: /bin/bash
          ssh_authorized_keys:
            - {{ ssh_public_key }}
            - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDNez/7KYhmC3H/jBmFWDKt7jCoiTrl4aOl6d3Uy6ndh80Spb+UVpEHkNvLYXB+XJ7bx5i8fqh4UE6Yo7prQVkv8Ti2BApqHSPzy2fVZGGBVbsUtzpmJ3Xbb+jZdqW76x9XnoFxwmTVDz76M4ox8ralaF6vOZA66IUCGCULM1YeCa/Berb/Le7RjV6Cq1Q/ljnMzSVtqasMPSXgENH5mFJ7pACk5TA55FMhObAtb/wsu1opJjBhqRF5lxhUz7TaemeFrUrV8AYlmxdhK5IXHjv735Zoj2yYXw1nrHzwpB9xbYxoSt3CIxJpIZ27nw5WHPxupPsLgmzQp1oxM1B/HfqQheymKMscYpDl6E7XwF94oEWaJNJlvTi0G52gQBKGTB3Luqug5qpbL7WuPJsfog9k+FDmvuN2rdJU4gdkpRxiRRC6B/Khql0d+TkMbiJph/QiIf31tVKPqXytRA2NeRze9GUJWLbYqqAfwpZBgzEWbO9/O69EHP2BS/Oq0FMByWc= mike@mike-17Z90P-K-AAC8U1
      
      ssh_pwauth: true
      chpasswd:
        expire: false
      
      packages:
        - openssh-server
      
      runcmd:
        - echo 'ubuntu:ubuntu' | chpasswd
        - systemctl enable ssh
        - systemctl start ssh
        - mkdir -p /home/ubuntu/.ssh
        - chmod 700 /home/ubuntu/.ssh
        - echo "{{ ssh_public_key }}" > /home/ubuntu/.ssh/authorized_keys
        - echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDNez/7KYhmC3H/jBmFWDKt7jCoiTrl4aOl6d3Uy6ndh80Spb+UVpEHkNvLYXB+XJ7bx5i8fqh4UE6Yo7prQVkv8Ti2BApqHSPzy2fVZGGBVbsUtzpmJ3Xbb+jZdqW76x9XnoFxwmTVDz76M4ox8ralaF6vOZA66IUCGCULM1YeCa/Berb/Le7RjV6Cq1Q/ljnMzSVtqasMPSXgENH5mFJ7pACk5TA55FMhObAtb/wsu1opJjBhqRF5lxhUz7TaemeFrUrV8AYlmxdhK5IXHjv735Zoj2yYXw1nrHzwpB9xbYxoSt3CIxJpIZ27nw5WHPxupPsLgmzQp1oxM1B/HfqQheymKMscYpDl6E7XwF94oEWaJNJlvTi0G52gQBKGTB3Luqug5qpbL7WuPJsfog9k+FDmvuN2rdJU4gdkpRxiRRC6B/Khql0d+TkMbiJph/QiIf31tVKPqXytRA2NeRze9GUJWLbYqqAfwpZBgzEWbO9/O69EHP2BS/Oq0FMByWc= mike@mike-17Z90P-K-AAC8U1" >> /home/ubuntu/.ssh/authorized_keys
        - chmod 600 /home/ubuntu/.ssh/authorized_keys
        - chown ubuntu:ubuntu /home/ubuntu/.ssh/authorized_keys
        - echo "{{ item.key }} setup complete" > /tmp/cloud-init-done
    dest: "/tmp/{{ item.key }}-userdata"
  loop: "{{ cluster_vms | dict2items }}"

- name: "Create cloud-init ISOs"
  shell: |
    scp /tmp/{{ item.key }}-userdata {{ kvm_user }}@{{ kvm_host }}:/tmp/
    ssh {{ kvm_user }}@{{ kvm_host }} '
    cat > /tmp/{{ item.key }}-metadata << "EOF"
    instance-id: {{ item.key }}-$(date +%s)
    local-hostname: {{ item.key }}
    EOF
    sudo genisoimage -output /var/lib/libvirt/images/{{ item.key }}-cidata.iso \
    -volid cidata -joliet -rock \
    /tmp/{{ item.key }}-userdata /tmp/{{ item.key }}-metadata'
  loop: "{{ cluster_vms | dict2items }}"

- name: "Create VM disks"
  shell: |
    ssh {{ kvm_user }}@{{ kvm_host }} '
    sudo qemu-img create -f qcow2 -F qcow2 \
    -b /var/lib/libvirt/images/ubuntu-base.img \
    /var/lib/libvirt/images/{{ item.key }}.qcow2 {{ item.value.disk }}G'
  loop: "{{ cluster_vms | dict2items }}"

- name: "Create VMs with cloud-init"
  shell: |
    ssh {{ kvm_user }}@{{ kvm_host }} '
    sudo virt-install \
    --name {{ item.key }} \
    --memory {{ item.value.memory }} \
    --vcpus {{ item.value.vcpus }} \
    --disk path=/var/lib/libvirt/images/{{ item.key }}.qcow2 \
    --disk path=/var/lib/libvirt/images/{{ item.key }}-cidata.iso,device=cdrom \
    --os-variant ubuntu22.04 \
    --network network=default \
    --graphics none \
    --noautoconsole \
    --import'
  loop: "{{ cluster_vms | dict2items }}"

- name: "Wait for VMs to boot and configure"
  pause:
    seconds: 180
    prompt: |
      Waiting for VMs to boot and cloud-init to complete...
      This may take 2-3 minutes for:
      - VM boot process
      - Cloud-init configuration
      - SSH service startup

- name: "Verify VMs are running"
  shell: |
    ssh {{ kvm_user }}@{{ kvm_host }} "
    echo 'VM Status:'
    sudo virsh list --all | grep k8s-
    echo ''
    echo 'VM IPs:'
    for vm in k8s-control k8s-worker1 k8s-worker2; do
      ip=\$(sudo virsh domifaddr \$vm | grep -E '192\.168\.' | awk '{print \$4}' | cut -d'/' -f1)
      if [ ! -z \"\$ip\" ]; then
        echo \"\$vm: \$ip\"
      else
        echo \"\$vm: NO_IP (still booting)\"
      fi
    done"
  register: vm_status

- name: "Display VM creation results"
  debug:
    msg: "{{ vm_status.stdout_lines }}"